{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "demobitsnov2022"
		},
		"LS_SQL_CustomerDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_CustomerDB'"
		},
		"LS_SQL_demobitsDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_demobitsDB'"
		},
		"LS_Storage_demobits_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Storage_demobits'"
		},
		"TRG_PL_CopyFileDynamic_StorageEvent_properties_PL_CopyFileDynamic_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"TRG_PL_CopyFileDynamic_StorageEvent_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/d003678d-3be9-4518-b21e-a5101bea6844/resourceGroups/demoRG/providers/Microsoft.Storage/storageAccounts/demobits"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyFileDynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Storage_demobits_source_dynamicfile",
								"type": "DatasetReference",
								"parameters": {
									"DatasetFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Storage_demobits_target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-05T15:49:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_source_dynamicfile')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyFileDynamic_TimeStampFolder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Storage_demobits_source_dynamicfile",
								"type": "DatasetReference",
								"parameters": {
									"DatasetFileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Storage_demobits_target_timestamp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-05T16:49:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_source_dynamicfile')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_target_timestamp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyIfNotExists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check File Existence",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Storage_demobits_target_dynamicfile",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IfFile is Present",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check File Existence",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(activity('Check File Existence').output.exists)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Storage_demobits_source_dynamicfile",
											"type": "DatasetReference",
											"parameters": {
												"DatasetFileName": {
													"value": "@pipeline().parameters.FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Storage_demobits_target",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-05T16:39:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_target_dynamicfile')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_source_dynamicfile')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CopyProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Products",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Storage_demobits_source_Product",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Storage_demobits_target",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-05T15:40:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_source_Product')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ExecuteDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Product Purchases",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_ProductPurchases",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PurchaseOrder": {},
									"Customer": {},
									"Output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-12T15:34:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_ProductPurchases')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_IncrementalCopy_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LKP_OldWaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TableName,WaterMarkValue AS OldWaterMarkValue FROM [dbo].[watermarktable]\nWHERE TableName = '@{pipeline().parameters.TableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_TargetDB_WaterMarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LKP_NewWaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(@{pipeline().parameters.WaterMarkColumn}) AS NewWaterMarkValue FROM @{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_CustomerDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LKP_OldWaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LKP_NewWaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM @{pipeline().parameters.TableName} WHERE @{pipeline().parameters.WaterMarkColumn} > '@{activity('LKP_OldWaterMarkValue').output.firstRow.OldWaterMarkValue}' AND @{pipeline().parameters.WaterMarkColumn}<='@{activity('LKP_NewWaterMarkValue').output.firstRow.NewWaterMarkValue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_CustomerDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_TargetDB_DynamicTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Update Watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@activity('LKP_NewWaterMarkValue').output.firstRow.NewWaterMarkValue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('LKP_OldWaterMarkValue').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_demobitsDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "orders"
					},
					"WaterMarkColumn": {
						"type": "string",
						"defaultValue": "InsertDateTime"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-06T15:55:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_TargetDB_WaterMarkTable')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_CustomerDB_Orders')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_TargetDB_DynamicTable')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_demobitsDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_IncrementalLoad_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is used to incrementally load data",
				"activities": [
					{
						"name": "LKP_ConfigurationTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_TargetDB_ConfigurationTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP_ConfigurationTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP_ConfigurationTable').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute PL_IncrementalCopy_Dynamic",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_IncrementalCopy_Dynamic",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableName": {
												"value": "@item().TableName",
												"type": "Expression"
											},
											"WaterMarkColumn": {
												"value": "@item().WaterMarkColumn",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-06T16:46:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_TargetDB_ConfigurationTable')]",
				"[concat(variables('factoryId'), '/pipelines/PL_IncrementalCopy_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LoadOrders_Incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LKP_OldWaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TableName,WaterMarkValue AS OldWaterMarkValue FROM [dbo].[watermarktable]\nWHERE TableName = 'orders'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_TargetDB_WaterMarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LKP_NewWaterMarkValue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT MAX(InsertDateTime) AS NewWaterMarkValue FROM Orders",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_CustomerDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy Orders",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LKP_OldWaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LKP_NewWaterMarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM Orders WHERE InsertDateTime > '@{activity('LKP_OldWaterMarkValue').output.firstRow.OldWaterMarkValue}' AND InsertDateTime<='@{activity('LKP_NewWaterMarkValue').output.firstRow.NewWaterMarkValue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ProductID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 10
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Quantity",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "InsertDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "InsertDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_CustomerDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_TargetDB_Orders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy Orders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spSetWatermark]",
							"storedProcedureParameters": {
								"NewTime": {
									"value": {
										"value": "@activity('LKP_NewWaterMarkValue').output.firstRow.NewWaterMarkValue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('LKP_OldWaterMarkValue').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_SQL_demobitsDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-06T16:10:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_TargetDB_WaterMarkTable')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_CustomerDB_Orders')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_TargetDB_Orders')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_demobitsDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_CustomerDB_Orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_CustomerDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "varchar"
					},
					{
						"name": "CustomerID",
						"type": "varchar"
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 4
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_CustomerDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_TargetDB_ConfigurationTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_demobitsDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WaterMarkColumn",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ConfigurationTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_demobitsDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_TargetDB_DynamicTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_demobitsDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "varchar"
					},
					{
						"name": "CustomerID",
						"type": "varchar"
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 4
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_demobitsDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_TargetDB_Orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_demobitsDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductID",
						"type": "varchar"
					},
					{
						"name": "CustomerID",
						"type": "varchar"
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 4
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_demobitsDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_TargetDB_WaterMarkTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_demobitsDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_demobitsDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_demobits_ProductPurchases')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_demobitsDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerCode",
						"type": "varchar"
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					},
					{
						"name": "ProductsPurchased",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ProductPurchases"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL_demobitsDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_demobits_OLTP_Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_demobits",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.txt",
						"container": "oltp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerCode",
						"type": "String"
					},
					{
						"name": " CustomerName",
						"type": "String"
					},
					{
						"name": " Address",
						"type": "String"
					},
					{
						"name": " PhoneNumber",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_demobits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_demobits_OLTP_PurchaseOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_demobits",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PurchaseOrder.txt",
						"container": "oltp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PurchaseOrderID",
						"type": "String"
					},
					{
						"name": " CustomerCode",
						"type": "String"
					},
					{
						"name": "ProductCode",
						"type": "String"
					},
					{
						"name": "EmployeeCode",
						"type": "String"
					},
					{
						"name": " PuchaseOrderDate",
						"type": "String"
					},
					{
						"name": " Quantity",
						"type": "String"
					},
					{
						"name": " UnitPrice",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_demobits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_demobits_source_Product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_demobits",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Product.txt",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ProductCode",
						"type": "String"
					},
					{
						"name": " ProductName",
						"type": "String"
					},
					{
						"name": " ProductGroup",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_demobits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_demobits_source_dynamicfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_demobits",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DatasetFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().DatasetFileName",
							"type": "Expression"
						},
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "show_id",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "director",
						"type": "String"
					},
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "date_added",
						"type": "String"
					},
					{
						"name": "release_year",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "duration",
						"type": "String"
					},
					{
						"name": "listed_in",
						"type": "String"
					},
					{
						"name": "description",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_demobits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_demobits_target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_demobits",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "target"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_demobits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_demobits_target_dynamicfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_demobits",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "target"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_demobits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Storage_demobits_target_timestamp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Storage_demobits",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@formatDateTime(utcnow(),'yyyyMMdd')",
							"type": "Expression"
						},
						"container": "target"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_demobits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_CustomerDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_CustomerDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL_demobitsDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_demobitsDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Storage_demobits')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Storage_demobits_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_PL_CopyFileDynamic_StorageEvent')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_CopyFileDynamic",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('TRG_PL_CopyFileDynamic_StorageEvent_properties_PL_CopyFileDynamic_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('TRG_PL_CopyFileDynamic_StorageEvent_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_CopyFileDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_PL_IncrementalLoad_Main_TumblingWIndow')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "PL_IncrementalLoad_Main",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2022-11-06T16:00:00Z",
					"endTime": "2022-11-07T16:59:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_IncrementalLoad_Main')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ProductPurchases')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Storage_demobits_OLTP_PurchaseOrder",
								"type": "DatasetReference"
							},
							"name": "PurchaseOrder"
						},
						{
							"dataset": {
								"referenceName": "DS_Storage_demobits_OLTP_Customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_demobits_ProductPurchases",
								"type": "DatasetReference"
							},
							"name": "Output"
						}
					],
					"transformations": [
						{
							"name": "PurchaseOrderProjected"
						},
						{
							"name": "CustomerProjected"
						},
						{
							"name": "DataQuality"
						},
						{
							"name": "JoinStream"
						},
						{
							"name": "ProductPurchases"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PurchaseOrderID as string,",
						"          { CustomerCode} as string,",
						"          ProductCode as string,",
						"          EmployeeCode as string,",
						"          { PuchaseOrderDate} as string,",
						"          { Quantity} as long,",
						"          { UnitPrice} as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> PurchaseOrder",
						"source(output(",
						"          CustomerCode as string,",
						"          { CustomerName} as string,",
						"          { Address} as string,",
						"          { PhoneNumber} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"PurchaseOrder select(mapColumn(",
						"          { CustomerCode},",
						"          { Quantity}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PurchaseOrderProjected",
						"Customer select(mapColumn(",
						"          CustomerCode,",
						"          { CustomerName}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustomerProjected",
						"PurchaseOrderProjected filter(greater({ Quantity}, 0)) ~> DataQuality",
						"DataQuality, CustomerProjected join({ CustomerCode} == CustomerCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinStream",
						"JoinStream aggregate(groupBy({ CustomerCode},",
						"          { CustomerName}),",
						"     ProductPurchases = sum({ Quantity})) ~> ProductPurchases",
						"ProductPurchases sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerCode as string,",
						"          CustomerName as string,",
						"          ProductsPurchased as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerCode = { CustomerCode},",
						"          CustomerName = { CustomerName},",
						"          ProductsPurchased = ProductPurchases",
						"     )) ~> Output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_OLTP_PurchaseOrder')]",
				"[concat(variables('factoryId'), '/datasets/DS_Storage_demobits_OLTP_Customer')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_demobits_ProductPurchases')]"
			]
		}
	]
}